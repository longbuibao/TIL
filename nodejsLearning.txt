
Query and Projection Operators mongodb
https://docs.mongodb.com/manual/reference/operator/query


Query and Projection Operators
https://docs.mongodb.com/manual/reference/operator/update/


throw Error so you can use the `try{}catch(){}` block
mongoose has a `validate` method to use your own validator


you have to put `String of 12 bytes or a string of 24 hex characters` to mongodb _id Object

userSchema.pre('save', async function(next) {
    const user = this
    
})
next to the next function
how can nodejs know when the pre function is done? next come into play

[Notes on findAndUpdate() and Query Middleware]
https://mongoosejs.com/docs/middleware.html#notes

if(user.isModified('password'))
create user-> true
update user-> true
create a middleware: not to write hash password in multiple place


research on [emty error object js vs error.message]
https://stackoverflow.com/questions/38513493/why-are-my-js-promise-catch-error-objects-empty
https://stackoverflow.com/questions/18391212/is-it-not-possible-to-stringify-an-error-using-json-stringify

authenticate => return a jwt
use that jwt to authorize

the goal of jwt
    - not to hide data, you can see what the data is
    - to VERIFY the data that you provied, to do something


userSchema.static is like static method of a class

Array.filter()

------------------------------------------------------------------------------------------------------------





						VIRTUAL PROPERTY

- virtual property is not actual data stored in the database, it's a relationship between two entities, (in this case User and Task)
- a way for Mongoose to figure out how these two things are related


userSchema.virtual('tasks', {
    ref: 'Task',
    localField: '_id',
    foreignField: 'owner'
})

`Task Schema`
owner: {
        type: mongoose.Schema.Types.ObjectId,
        require: true,
        ref: 'User'
    }

- create a virtual field, not going to store in the database
- userSchema -> has `tasks` -> `tasks` is `ref` to `Task` -> (localField(_id)(user) <---connect to---> foreignField(owner)(task))








